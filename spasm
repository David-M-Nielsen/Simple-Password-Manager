#!/bin/sh -ex
#TODO reorganize whole file
#TODO add function to print database structure
DATA="$HOME/.local/share/spasm" #TODO look into a way of improving this to fit more systems. XDG_DATA_HOME maybe?

OPT_ADD=
OPT_GET=
PRINT_PASS=

cat=""
name=""
pass=""

#TODO include all program options
#TODO improve formatting and readability
usage(){ 
	echo "usage: spasm [ -h ] [ -P] [ -G length | -p password ] [ -a [category]/[name] ] [ -g [category]/[name] ] [ -d [category/name] ]"
}

tree(){
	dir=""
	file=""
	for pass_category in "$DATA"/* ; do
		dir=$(echo "$pass_category" | rev | cut -d"/" -f1 | rev)
		echo "$dir"
		for pass_name in "$pass_category"/* ; do
			file=$(echo "$pass_name" | rev | cut -d"/" -f1 | rev)
			echo " $file"
		done
	done
}

explode(){
	usage && exit 1
}

#TODO implement creating backups
make_backup()(
	echo "creating backup..."
	#cp $DATA spasm.bak
)

#TODO implement restoring from a .bak file
restore_backup(){
	echo "restoring from .bak file"
}

gen_pass() {
	#TODO Overhaul to include special characters and follow OWASP
	< /dev/urandom tr -dc A-Za-z0-9 | head -c"$1"; echo # Temporary. 
}

add_pass(){
	[ -z "$pass" ] && echo "invalid argument -- -a requires password" && explode
	[ -f "$DATA/$cat/$name" ] && echo "password for \"$name\" already exists" && explode
	mkdir -p "$DATA/$cat" && echo "adding password: $pass to $cat/$name" 

	if [ -n "$(type "gpg2")" ]; then	
		phrase="$cat/$name"
		echo $pass | gpg2 -q --batch --passphrase $phrase -c > "$DATA/$cat/$name"
	else
		echo $pass > "$DATA/$cat/$name"
	fi
}

get_pass(){
	[ ! -f "$DATA/$cat/$name" ] && echo "invalid argument -- no such category or password" && explode

	if [ -n "$(type "gpg2")" ]; then
		phrase="$cat/$name"
		pass=$(gpg2 -q --batch --passphrase $phrase -d "$DATA/$cat/$name") 
	else
		pass=$(cat "$DATA/$cat/$name")
	fi

	type "xclip" >/dev/null 2>&1 && echo "$pass" | xclip -selection c || PRINT_PASS=true
	[ $PRINT_PASS ] && echo "$pass"
}

# parses if the path was typed correctly: "category/service"
parse_path(){
	#TODO check if theres a better/faster way to do this check.
	control="$1"
	cat=$(echo "$1" | cut -d"/" -f1)
	name=$(echo "$1" | cut -d"/" -f2)
	
	if [ ! "$control" = "$cat/$name" ]; then 
		echo "invalid argument -- path should be passed like: [category]/[name]"
		explode 
	fi
}

delete_pass(){
	[ ! -f "$DATA/$1" ] && echo "invalid argument -- no such category or password" && explode
	rm -rf "$(var:"$DATA/$1")"
	[ ! "$(ls -A "$DATA/$cat")" ] && rmdir "$DATA/$cat"
}

optstring="hG:p:a:g:d:Pt"
while getopts $optstring FLAG; #TODO add handling for no options passed
do	
	case "$FLAG" in	
	h) usage && exit 0 ;;
	G) [ -n "$pass" ] && explode || pass=$(gen_pass "$OPTARG") ;;#TODO add proper error messages
	p) [ -n "$pass" ] && explode || pass=${OPTARG} ;;#TODO add proper error messages
	a) parse_path "$OPTARG" && OPT_ADD=true ;;
	g) parse_path "$OPTARG" && OPT_GET=true ;;
	P) PRINT_PASS=true ;;
	d) parse_path "$OPTARG" && delete_pass "$OPTARG" ;;
	t) tree ;;
	\?) usage; exit 1 ;;
	esac
done

[ $OPT_ADD ] && add_pass
[ $OPT_GET ] && get_pass

exit 0
