#!/bin/sh
#
# a password management shell script
#
# MIT License
# 
# Copyright (c) 2019 David Monberg Nielsen
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


#TODO reorganize whole file
DATA="$HOME/.local/share/spasm" #TODO look into a way of improving this to fit more systems. XDG_DATA_HOME maybe?
PREV_PID=
MASTER_HASH=
OPT_ADD=
OPT_GET=
PRINT_PASS=
HAD_OPTS=
PID=$(ps -p $$ -o ppid=)

cat=""
name=""
pass=""

usage(){ 
cat << EOF
usage: 
	spasm [OPTIONS...]

options:
	-h: prints this help
	-P: print the input or retrieved password
	-T: prints password database structure
	-G [LENGTH]: generate a password of the given length
	-p [PASSWORD]: takes parameter as password
	-a [CATEGORY/NAME]: adds a password to the given database path
	-g [CATEGORY/NAME]: gets a password from the database path given
	-d [CATEGORY/NAME]: deletes a password from the given database path
EOF
}

tree(){
	dir=""
	file=""
	for pass_category in "$DATA"/* ; do
		dir=$(echo "${pass_category##*/}")
		echo "$dir"
		for pass_name in "$pass_category"/* ; do
			file=$(echo "${pass_name##*/}")
			echo " $file"
		done
	done
}

explode(){
	usage && exit 1
}

gen_pass() {
	#TODO Overhaul to include special characters and follow OWASP
	< /dev/urandom tr -dc A-Za-z0-9 | head -c"$1"; echo # Temporary. 
}

add_pass(){
	[ -z "$pass" ] && echo "invalid argument -- -a requires password" && explode
	[ -f "$DATA/$cat/$name" ] && echo "password for \"$name\" already exists" && explode
	mkdir -p "$DATA/$cat" && echo "adding password: $pass to $cat/$name" 

	if [ -n "$(type "gpg2")" ]; then	
		echo $pass | gpg2 -q --batch --passphrase "$MASTER_HASH" -c > "$DATA/$cat/$name"
	else
		echo $pass > "$DATA/$cat/$name"
	fi
}

get_pass(){
	[ ! -f "$DATA/$cat/$name" ] && echo "invalid argument -- no such category or password" && explode

	if [ -n "$(type "gpg2")" ]; then
		pass=$(gpg2 -q --batch --passphrase "$MASTER_HASH" -d "$DATA/$cat/$name") 
	else
		pass=$(cat "$DATA/$cat/$name")
	fi

	type "xclip" >/dev/null 2>&1 && echo "$pass" | xclip -selection c || PRINT_PASS=true
	[ $PRINT_PASS ] && echo "$pass"
}

# checks if the path was typed correctly: "category/service"
parse_path(){
	#TODO find out if theres a better/faster way to do this.
	control="$1"
	cat=$(echo "$1" | cut -d"/" -f1)
	name=$(echo "$1" | cut -d"/" -f2)
	
	if [ "$control" != "$cat/$name" ]; then 
		echo "invalid argument -- path should be passed like: [category]/[name]"
		explode 
	fi
}

delete_pass(){
	[ ! -f "$DATA/$1" ] && echo "invalid argument -- no such category or password" && explode
	rm "$DATA/$1"
	[ ! "$(ls -A "$DATA/$cat")" ] && rmdir "$DATA/$cat"
}

run(){
	echo "$PID" > "$DATA/.pid"
	optstring="hPTG:p:a:g:d:"
	while getopts $optstring FLAG; #TODO add handling for no options passed
	do	
		HAD_OPTS=true
		case "$FLAG" in	
		h) usage && exit 0 ;;
		G) [ -n "$pass" ] && explode || pass=$(gen_pass "$OPTARG") ;;#TODO add proper error messages
		p) [ -n "$pass" ] && explode || pass=${OPTARG} ;;#TODO add proper error messages
		a) parse_path "$OPTARG" && OPT_ADD=true ;;
		g) parse_path "$OPTARG" && OPT_GET=true ;;
		P) PRINT_PASS=true ;;
		d) parse_path "$OPTARG" && delete_pass "$OPTARG" ;;
		T) tree ;;
		\?) usage; exit 1 ;;
		esac
	done
	
	if [ $HAD_OPTS ]; then
		[ $OPT_ADD ] && add_pass
		[ $OPT_GET ] && get_pass
	else
		echo "Error: spasm requires argument" && explode
	fi
}

[ -f "$DATA/.master" ] && MASTER_HASH=$(cat "$DATA/.master")
if [ -n "$MASTER_HASH" ]; then	
	[ -f "$DATA/.pid" ] && PREV_PID=$(cat "$DATA/.pid")
	if [ -n "$PREV_PID" ] && [ "$PREV_PID" = "$PID" ]; then
		run "$@"
	else
		read -s -p "enter master passphrase:"$'\n' PASSPHRASE
		if [ "$MASTER_HASH" == $(echo "$PASSPHRASE" | sha512sum | cut -d " " -f1) ]; then
			run "$@"
		else
			echo "incorrect master passphrase" && exit 1
		fi
	fi
else
	read -s -p "no master passphrase found. please select one:"$'\n' PASSPHRASE
	mkdir -p $DATA && echo $(echo "$PASSPHRASE" | sha512sum | cut -d " " -f1) > "$DATA/.master" && echo "master passphrase added" && exit 0
fi


exit 0
